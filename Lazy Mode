懒加载
像vue这种单页面应用，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，时间过长，会出啊先长时间的白屏，
即使做了loading也是不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。

简单的说就是：进入首页不用一次加载过多资源，造成用时过长。
也叫延迟加载，即在需要的时候进行加载，随用随载。
个人根据功能划分为图片的懒加载和组件的懒加载。
组件化分治思想
为了方便后续的优化，我们必须要求每个模块之间降低耦合，将相关的逻辑（比如请求接口、请求相关的依赖资源）都封装在内部，在 Vue 里落实成组件的形式。
将各模块拆分为组件粒度
将组件依赖的资源全部封装在组件内部进行调用
加载优先级
在完成了组件化的拆分，确保模块之间不会互相影响和产生耦合之后，我们可以方面地调整加载策略。加载的策略是根据可见性来处理优先级问题。
优先加载首屏可见模块
其余不可见模块懒加载，待可见或即将可见时加载
demo https://github.com/xunleif2e/vue-lazy-component

如果可见后进行初始渲染，可见前如何显示？
如果在判断加载条件为假的时候，什么都不渲染，就会带来一系列问题：

用户体验比较差，最开始是白屏，然后突然又渲染出现内容。
最致命的是我们判断可见性是需要一个目标来观察的，如果什么不都渲染，我们就无从观察。

这里引入一个骨架屏的概念，我们为真实的组件做一个在尺寸、样式上非常接近真实组件的组件，叫做骨架屏。


提升用户感知体验，保证切换的一致性，供可见性观察的目标对象
在真实组件开始渲染的时候，需要一定的时间和空间，时间指的是真实组件从创建到渲染的时间，包括请求接口、请求资源和渲染的时间，空间指的是页面布局中需要给真实组件留出刚好的位置，避免产生抖动。
这里我们可以使用 Vue.js 内置的 transition 组件自定义骨架组件和真实组件的进入和离开效果，通过合理的布局和定位，减少切换时的抖动，通过设置过渡效果给真实组件留出一定的加载时间。
